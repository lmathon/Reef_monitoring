myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
# Define response variable and predictors
myResponse=c("CORAL")
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density")
myPredictorNumeric=c("SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density", "Lutjanidae_Density", "Scaridae_Density",
"Herbivorous_Density", "Invertivorous_Density", "Omnivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density")
# verifier les correlations entre predicteurs numeriques
cort = cor(na.omit(myData[,myPredictorNumeric]))
cort
cores = detectCores()
cores    # ma machine a 8 coeurs
# Setting the different parameters to combine
tree.complexity = c(1:5)
learning.rate = c(0.01, 0.005, 0.001)
bag.fraction = c(1,2)
#Make cluster for parallel processing
cores = detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
responseName=myResponse # in case there is only one response variable
print(paste("----------------------", responseName))
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
setwd("C:/Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/R_scripts/02_Analyses_Plots/BRT/BRT_Coral_cover")
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# Load fish data
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Site_biodiversity_metrics.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep = ",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Site_biodiv$Year <- as.factor(Site_biodiv$Year)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
# Define response variable and predictors
myResponse=c("CORAL")
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density")
myPredictorNumeric=c("SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density", "Lutjanidae_Density", "Scaridae_Density",
"Herbivorous_Density", "Invertivorous_Density", "Omnivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density")
# verifier les correlations entre predicteurs numeriques
cort = cor(na.omit(myData[,myPredictorNumeric]))
cort
cores = detectCores()
cores    # ma machine a 8 coeurs
# Setting the different parameters to combine
tree.complexity = c(1:5)
learning.rate = c(0.01, 0.005, 0.001)
bag.fraction = c(1,2)
#Make cluster for parallel processing
cores = detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
responseName=myResponse # in case there is only one response variable
print(paste("----------------------", responseName))
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "gaussian")
best_parameters
model <- "Model_CORAL_tc_3_lr_0.005_bf_1"
as.numeric(substr(model, nchar(as.character(model)-1, nchar(as.character(model)))))
substr(model, nchar(as.character(model)-1, nchar(as.character(model))))
substr(nchar(as.character(model)))
substr(model, nchar(as.character(model), nchar(as.character(model))))
bag.fraction = c(0.9,1.9)
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "gaussian")
as.numeric(substr(model, nchar(as.character(model))-2, nchar(as.character(model))))
substr(model, nchar(as.character(model))-2, nchar(as.character(model)))
substr(model, nchar(as.character(model)))
substr(model, nchar(as.character(model)), nchar(as.character(model)))
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "gaussian")
best_parameters
bag.fraction = c(1,2)
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "gaussian")
best_parameters
# Fit best model
mod_best_fixed = fit_best_gaussian_brt_fixed(myData, responseName, best_parameters, myPredictor)
mod_best_fixed
summary(mod_best_fixed)
names(mod_best_fixed)
mod_best_fixed$contributions
# Make plot of variable contributions best fixed model
make_contribution_reduced_plot(mod_best_fixed, responseName, "poisson")
# Get variables with contributions > 5%
var_sup5_best_fixed = get_variables_contrib_sup5(mod_best_fixed)
# Refit after dropping predictors with contributions < 5%
mod_best_fixed_reduced = fit_best_reduced_gaussian_brt_fixed(myData, responseName, best_parameters,
preds = var_sup5_best_fixed)
mod_best_fixed_reduced
summary(mod_best_fixed_reduced)
names(mod_best_fixed_reduced)
mod_best_fixed_reduced$contributions
mod_best_fixed_reduced$var.names
# Make plot of variable contributions reduced model
make_contribution_reduced_plot(mod_best_fixed_reduced, responseName, "poisson")
# Partial dependance plots reduced model
partial_dependance_plots3(mod_best_fixed_reduced, responseName, "poisson")
# Refit a gbmStep after dropping predictors with contributions < 5%
mod_best_gbmStep_reduced = fit_best_reduced_gaussian_brt_gbmStep(myData, responseName, best_parameters,
preds = var_sup5_best_fixed)
preds = var_sup5_best_fixed
# remove na in response variable
data_brts2 = subset(myData, !is.na(myData[,responseName]))
# get column response number
col_response = which(colnames(data_brts2) == responseName)
#fit model with step-variable number of trees
tbmod = dismo::gbm.step(data = data_brts2, gbm.x = as.character(preds),
gbm.y = col_response,
family = "gaussian",
tree.complexity = as.numeric(best_parameters[,2]),
learning.rate = as.numeric(best_parameters[,3]),
bag.fraction = as.numeric(best_parameters[,10]),
prev.stratify = FALSE,
n.folds = 10,
n.trees = 700,
step.size = 25,
silent = TRUE,
plot.main = FALSE,
n.cores = cores)
tbmod
k.out = data.frame (BestGbmStep=c("TreeComplexity",
"LearningRate",
"n.trees",
"deviance",
"cv.deviance.mean",
"cv.deviance.se",
"cv.correlation.mean",
"cv.correlation.se"),
Value=c(tbmod$interaction.depth,
tbmod$shrinkage,
tbmod$n.trees,
tbmod$self.statistics$mean.resid,
tbmod$cv.statistics$deviance.mean,
tbmod$cv.statistics$deviance.se,
tbmod$cv.statistics$correlation.mean,
tbmod$cv.statistics$correlation.se))
write.csv(list(BestModel = k.out),file=paste0("final_results_mod_best_gbmStep_reduced_", responseName_brts, "_gaussian_", ".csv"))
write.csv(list(BestModel = k.out),file=paste0("final_results_mod_best_gbmStep_reduced_", responseName, "_gaussian_", ".csv"))
save(tbmod, file = paste0("best_gbmStep_reduced_gaussian_brt_", responseName, ".RData"))
mod_best_gbmStep_reduced = tbmod
names(mod_best_gbmStep_reduced)
mod_best_gbmStep_reduced$cv.statistics
mod_best_gbmStep_reduced$shrinkage
mod_best_gbmStep_reduced$n.trees
mod_best_gbmStep_reduced$contributions
mod_best_fixed_reduced$contributions
#explore interactions for best reduced model (must be a gbmStep - dont work with gbmfixed)
find.int <- dismo::gbm.interactions(mod_best_gbmStep_reduced)
find.int$interactions
find.int$rank.list
png(paste0("InteractionPlotsBestModel.png"), width = 1200, height = 600)
par(mfrow=c(1,2))
dismo::gbm.perspec(mod_best_gbmStep_reduced, 4, 2, z.range=c(0,2))
dismo::gbm.perspec(mod_best_gbmStep_reduced, 1, 3, z.range=c(1,3.5))
dev.off()
par(mfrow=c(1,1))
png(paste0("InteractionPlotsBestModelDismo.png"), width = 1200, height = 600)
dismo::gbm.plot(mod_best_gbmStep_reduced, n.plots=5, plot.layout=c(3, 2), write.title = FALSE)
dev.off()
gbm::plot.gbm(mod_best_gbmStep_reduced, i.var=c(1))
gbm::plot.gbm(mod_best_gbmStep_reduced, i.var=c(1,2),level.plot=FALSE)
library(funk)
library(vegan)
library(ade4)
library(lme4)
library(DHARMa)
library(car)
library(visreg)
library(ecospat)
library(modEvA)
library(psych)
library(MASS)
library(lmeInfo)
library(pscl)
library(spdep)
library(tidyverse)
library(nlme)
library(MuMIn)
library(rcompanion)
library(ggpubr)
library(ggplot2)
library(effectsize)
library(performance)
library(relaimpo)
# Load fish data
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Site_biodiversity_metrics.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep = ",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Site_biodiv$Year <- as.factor(Site_biodiv$Year)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast", "Lomgitude", "Latitude")], Site_biodiv)
View(meta)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast", "Longitude", "Latitude")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
myData <- myData[,c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL")]
mexp <- gls(CORAL ~ . -Latitude - Longitude, correlation = corExp(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast", "Longitude", "Latitude")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
myData <- myData[,c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "SPONGES", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
mexp <- gls(CORAL ~ . -Latitude - Longitude, correlation = corExp(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
View(myData)
myData <- myData %>%
filter(!is.na(GORGONIANS))
mexp <- gls(CORAL ~ . -Latitude - Longitude, correlation = corExp(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mgau <- gls(MOTUs ~ . -Latitude - Longitude, correlation = corGaus(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mgau <- gls(CORAL ~ . -Latitude - Longitude, correlation = corGaus(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
msph <- gls(CORAL ~ . -Latitude - Longitude, correlation = corSpher(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mlin <- gls(CORAL ~ . -Latitude - Longitude, correlation = corLin(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mrat <- gls(CORAL ~ . -Latitude - Longitude, correlation = corRatio(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mexp <- gls(CORAL ~ ., data = myData,method="ML")
mexp <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
myData <- myData[,c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
myData <- myData %>%
filter(!is.na(GORGONIANS))
mexp <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
myData <- myData[,c("Year", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
mexp <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
myData <- myData[,c("Year", "SST",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
mexp <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
mgau <- gls(CORAL ~ . -Latitude - Longitude, correlation = corGaus(form = ~Longitude + Latitude, nugget = TRUE), data = myData,method="ML")
mgau <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
msph <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
mlin <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
mrat <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
# Info full model
AIC(mexp, mgau, msph, mlin, mrat)
gls.full <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
myData <- myData[,c("Year", "SST", "Protection",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
gls.full <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
summary(gls.full)
r2(gls.full)
hist(gls.full$residuals)
vif(gls.full)
anova(gls.full, type = "marginal")
# remove colinear variables from VIF
gls2 <- gls(CORAL ~ MacroAlgae_MeanHeight+DHW+MACROALGAE+Year, data = myData,method="ML")
AIC(gls2)
summary(gls2)
anova(gls2, type = "marginal")
r2(gls2)
hist(gls2$residuals)
fit.MAD.coral <- visreg(gls2,"MACROALGAE",scale="response")
fit.SST.motus <- visreg(gls2,"MacroAlgae_MeanHeight",scale="response")
fit.SSS.motus <- visreg(gls2,"Year",scale="response")
anova(gls.full, type = "marginal")
visreg(gls.full,"MACROALGAE",scale="response")
visreg(gls.full,"MacroAlgae_MeanHeight",scale="response")
visreg(gls.full,"Year",scale="response")
visreg(gls.full,"SST",scale="response")
visreg(gls.full,"DHW",scale="response")
visreg(gls.full,"dist_to_coast",scale="response")
visreg(gls.full,"Fish_density",scale="response")
visreg(gls.full,"GORGONIANS",scale="response")
visreg(gls.full,"Acanthuridae_Density",scale="response")
visreg(gls.full,"Labridae_Density",scale="response")
visreg(gls.full,"Scaridae_Density",scale="response")
visreg(gls.full,"Herbivorous_Density",scale="response")
visreg(gls.full,"Piscivorous_Density",scale="response")
visreg(gls.full,"Recruits_density",scale="response")
visreg(gls.full,"Protection",scale="response")
myData <- myData[,c("Year", "SST", "Protection",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast", "Longitude", "Latitude")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
myData <- myData[,c("Year", "SST", "Protection",
"DHW", "dist_to_coast", "Fish_density", "GORGONIANS", "MACROALGAE",
"Acanthuridae_Density", "Labridae_Density","Scaridae_Density",
"Herbivorous_Density", "Piscivorous_Density",
"MacroAlgae_MeanHeight", "Recruits_density", "CORAL", "Longitude", "Latitude")]
myData <- myData %>%
filter(!is.na(GORGONIANS))
gls.full <- gls(CORAL ~ . -Latitude - Longitude, data = myData,method="ML")
summary(gls.full)
anova(gls.full, type = "marginal")
r2(gls.full)
visreg(gls.full,"Protection",scale="response")
# GLS with selected variables
gls2 <- gls(CORAL ~ MacroAlgae_MeanHeight+DHW+MACROALGAE+Year+Herbivorous_Density+GORGONIANS, data = myData,method="ML")
AIC(gls2)
summary(gls2)
anova(gls2, type = "marginal")
r2(gls2)
hist(gls2$residuals)
visreg(gls2,"MACROALGAE",scale="response")
visreg(gls2,"MacroAlgae_MeanHeight",scale="response")
visreg(gls2,"Year",scale="response")
visreg(gls2,"Herbivorous_Density",scale="response")
visreg(gls2,"GORGONIANS",scale="response")
# GLS with selected variables
gls2 <- gls(CORAL ~ MacroAlgae_MeanHeight+DHW+MACROALGAE+Year+Herbivorous_Density, data = myData,method="ML")
AIC(gls2)
anova(gls2, type = "marginal")
visreg(gls2,"MACROALGAE",scale="response")
visreg(gls2,"MacroAlgae_MeanHeight",scale="response")
# GLS with selected variables
gls2 <- gls(CORAL ~ DHW+MACROALGAE+Year+Herbivorous_Density, data = myData,method="ML")
anova(gls2, type = "marginal")
visreg(gls2,"MACROALGAE",scale="response")
visreg(gls2,"Year",scale="response")
visreg(gls2,"Herbivorous_Density",scale="response")
visreg(gls2,"GORGONIANS",scale="response")
effectsize(gls2)
relimpo <- calc.relimp(CORAL ~ DHW+MACROALGAE+Year+Herbivorous_Density,
myData, type = c("lmg", "last", "first"))
r2 <- as.data.frame(relimpo$lmg)
r2
library(mgcv)
GAM = gam(CORAL ~ MACROALGAE, data = myData)
summary(GAM)
GAM2 = gam(CORAL ~ s(MACROALGAE), data=myData)
summary(GAM2)
plot(GAM)
plot(GAM2)
GAM3 = gam(CORAL ~ DHW+MACROALGAE+Year+Herbivorous_Density, data = myData)
summary(GAM3)
GAM4 = gam(CORAL ~ s(DHW)+s(MACROALGAE)+Year+s(Herbivorous_Density), data = myData)
summary(GAM4)
plot(GAM4)
plot(ggeffects::ggpredict(GAM4), facets = TRUE)
install.packages("ggeffects")
library(ggeffects)
plot(ggeffects::ggpredict(GAM4), facets = TRUE)
gratia::draw(GAM4)
View(GAM4)
