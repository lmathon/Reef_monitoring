## PERMANOVA ~ Year*cyclone*Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone*Year*Protection, data = Fish_species_abund_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Fish_species_abund_site,  by= "margin", permutations = 999)
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Fish_species_abund_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year/Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year/Protection, data = Fish_species_abund_site, permutations = 999)
perm_sp #  Significant effect of Year and Protection nested in Year
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Fish_species_biomass_site.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep=",", na.strings = "NA")
#-------------------------------------------------------------------------------------------
## Prepare Fish species assemblage
#-------------------------------------------------------------------------------------------
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Fish_species_biomass_site <- left_join(meta[,c("Site_ID","Protection","Latitude","Longitude", "Site","Year")], Fish_species_biomass_site)
rownames(Fish_species_biomass_site) <- Fish_species_biomass_site$Site_ID
Fish_species_biomass_site$Year <- as.factor(Fish_species_biomass_site$Year)
Fish_species_biomass_site <- Fish_species_biomass_site %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
Fish_species_biomass_site$Protection <- as.factor(Fish_species_biomass_site$Protection)
Fish_species_biomass_site$cyclone <- as.factor(Fish_species_biomass_site$cyclone)
Fish_species_biomass_site$Site <- as.factor(Fish_species_biomass_site$Site)
Fish_species_biomass_site <- Fish_species_biomass_site %>%
filter(!is.na(`Abudefduf saxatilis`))
sp_matrix <- Fish_species_biomass_site[,c(7:89)]
dist_matrix <- vegdist(sp_matrix, method = "bray")
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_species_biomass_site)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_species_biomass_site, permutations = 999)
perm_sp
pair.mod<-pairwise.adonis(sp_matrix,factors=Fish_species_biomass_site$Year)
pair.mod
#--------------------------------------------------------------------------------
## PERMANOVA ~ Site
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Site, data = Fish_species_biomass_site, permutations = 999)
perm_sp
pair.mod<-pairwise.adonis(sp_matrix,factors=Fish_species_biomass_site$Site)
pair.mod # 2016 is different
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection, data = Fish_species_biomass_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Cyclone
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone, data = Fish_species_biomass_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year*cyclone*Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone*Year*Protection, data = Fish_species_biomass_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Fish_species_biomass_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year/Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year/Protection, data = Fish_species_biomass_site, permutations = 999)
perm_sp # Significant effect of Year and Protection nested in Year
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Fish_trophic_site.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep=",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Fish_trophic_site <- left_join(meta[,c("Site_ID","Protection","Latitude","Longitude","Year","Site")], Fish_trophic_site)
Fish_trophic_site$Year <- as.factor(Fish_trophic_site$Year)
Fish_trophic_site <- Fish_trophic_site %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
Fish_trophic_site$Protection <- as.factor(Fish_trophic_site$Protection)
Fish_trophic_site$cyclone <- as.factor(Fish_trophic_site$cyclone)
Fish_trophic_site$Site <- as.factor(Fish_trophic_site$Site)
Fish_trophic_site <- Fish_trophic_site %>%
filter(!is.na(Herbivorous_Density))
troph_matrix <- Fish_trophic_site[,c(11:14)]
dist_matrix <- vegdist(troph_matrix, method = "bray")
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_trophic_site)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_trophic_site, permutations = 999)
perm_sp
pair.mod<-pairwise.adonis(dist_matrix,factors=Fish_trophic_site$Year)
pair.mod
#--------------------------------------------------------------------------------
## PERMANOVA ~ Site
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Site, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Cyclone
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year*cyclone*Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone*Year*Protection, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year/Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year/Protection, data = Fish_trophic_site, permutations = 999)
perm_sp # Significant effect of Year and Protection nested in Year
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Fish_trophic_site.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep=",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Fish_trophic_site <- left_join(meta[,c("Site_ID","Protection","Latitude","Longitude","Year","Site")], Fish_trophic_site)
Fish_trophic_site$Year <- as.factor(Fish_trophic_site$Year)
Fish_trophic_site <- Fish_trophic_site %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
Fish_trophic_site$Protection <- as.factor(Fish_trophic_site$Protection)
Fish_trophic_site$cyclone <- as.factor(Fish_trophic_site$cyclone)
Fish_trophic_site$Site <- as.factor(Fish_trophic_site$Site)
Fish_trophic_site <- Fish_trophic_site %>%
filter(!is.na(Herbivorous_Density))
troph_matrix <- Fish_trophic_site[,c(15:18)]
dist_matrix <- vegdist(troph_matrix, method = "bray")
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_trophic_site)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Fish_trophic_site, permutations = 999)
perm_sp
pair.mod<-pairwise.adonis(dist_matrix,factors=Fish_trophic_site$Year)
pair.mod
#--------------------------------------------------------------------------------
## PERMANOVA ~ Site
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Site, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Cyclone
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year*cyclone*Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone*Year*Protection, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Fish_trophic_site, permutations = 999)
perm_sp
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year/Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year/Protection, data = Fish_trophic_site, permutations = 999)
perm_sp # Significant effect of Year and Protection nested in Year
load("C:/Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep=",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Benthic_cover_site_all <- left_join(meta[,c("Site_ID","Protection","Latitude","Longitude","Year","Site")], Benthic_cover_site_all)
Benthic_cover_site_all$Year <- as.factor(Benthic_cover_site_all$Year)
Benthic_cover_site_all <- Benthic_cover_site_all %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
Benthic_cover_site_all <- Benthic_cover_site_all %>%
filter(!is.na(CORAL))
cover_matrix <- Benthic_cover_site_all[,c(19:124)]
dist_matrix <- vegdist(cover_matrix, method = "bray")
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year, data = Benthic_cover_site_all, permutations = 999)
perm_sp # Significant Year effect
pair.mod<-pairwise.adonis(dist_matrix,factors=Benthic_cover_site_all$Year)
pair.mod # 2016 is different
#--------------------------------------------------------------------------------
## PERMANOVA ~ Site
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Site, data = Benthic_cover_site_all, permutations = 999)
perm_sp # No site effect
pair.mod<-pairwise.adonis(dist_matrix,factors=Benthic_cover_site_all$Site)
pair.mod
pair.mod
#--------------------------------------------------------------------------------
## PERMANOVA ~ Cyclone
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone, data = Benthic_cover_site_all, permutations = 999)
perm_sp # Significant Cyclone effect
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year*cyclone*Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ cyclone*Year*Protection, data = Benthic_cover_site_all, permutations = 999)
perm_sp # Significant effect of Year, cyclone and protection, but not their interaction
#--------------------------------------------------------------------------------
## PERMANOVA ~ Protection/Year
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Protection/Year, data = Benthic_cover_site_all, permutations = 999)
perm_sp # Significant effect of Year and Year nested in Protection
#--------------------------------------------------------------------------------
## PERMANOVA ~ Year/Protection
#--------------------------------------------------------------------------------
perm_sp=adonis2(dist_matrix ~ Year/Protection, data = Benthic_cover_site_all, permutations = 999)
perm_sp # Significant effect of Year and Protection nested in Year
library(raster)
library(ggplot2)
library(tidyverse)
library(sf)
library(rgdal)
# load shapefile land, waterbodies and MPA
St_Martin_Land <- readOGR("c://Users/mathonlocal/Desktop/CORENA Project/Cartography/Land - Waterbodies/Saint_Martin_FR.shp")
St_Maarten_Land <- readOGR("c://Users/mathonlocal/Desktop/CORENA Project/Cartography/Land - Waterbodies/SXM_Land.shp")
MPA <- readOGR("c://Users/mathonlocal/Desktop/CORENA Project/Cartography/StMaartenMarinePark/maartenMarinePark.shp")
bathy100 <- raster("c://Users/mathonlocal/Desktop/Github/Seamounts_3Dmodelling/00_metadata/environmental/bathytopoMNT100m/MNT-nettoye_v3_FINAL.tif")
setwd("C:/Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/R_scripts/02_Analyses_Plots/BRT/BRT_Fish_richness")
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# Load fish data
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Site_biodiversity_metrics.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep = ",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Site_biodiv$Year <- as.factor(Site_biodiv$Year)
View(meta)
View(Site_biodiv)
View(meta)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast")], Site_biodiv)
library(tidyverse)
#load libraries
library(readxl)
library(writexl)
library(ggplot2)
library(jtools)
library(ggstance)
library(rms)
library(fitdistrplus)
library(huxtable)
library(parallel)
library(foreach)
library(doParallel)
library(dplyr)
library(here)
library(raster)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast")], Site_biodiv)
View(myData)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
View(bleach_disease)
View(Benthic_cover_site_all)
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
names(myData)
# Define response variable and predictors
myResponse=c("Fish_richness")
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "Dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
myPredictorNumeric=c("SST", "DHW", "Dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# verifier les correlations entre predicteurs numeriques
cort = cor(na.omit(myData[,myPredictorNumeric]))
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
myPredictorNumeric=c("SST", "DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
# verifier les correlations entre predicteurs numeriques
cort = cor(na.omit(myData[,myPredictorNumeric]))
cort
cores = detectCores()
cores    # ma machine a 8 coeurs
# Setting the different parameters to combine
tree.complexity = c(1:5)
learning.rate = c(0.01, 0.005, 0.001)
bag.fraction = c(0.5,0.75)
#Make cluster for parallel processing
cores = detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
responseName=myResponse # in case there is only one response variable
print(paste("----------------------", responseName))
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
myData$Site <- as.factor(myData$Site)
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
myPredictorNumeric=c("SST", "DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "poisson")
best_parameters
setwd("C:/Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/R_scripts/02_Analyses_Plots/BRT/BRT_Fish_richness")
# charger les fonctions BRT necessaires
source("BRT_Functions.R")
# Load fish data
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Site_biodiversity_metrics.rdata")
meta <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/1 - Metadata/GCRMN_metadata.csv", sep = ",", na.strings = "NA")
meta$Protection[is.na(meta$Protection)] <- "Unprotected"
Site_biodiv$Year <- as.factor(Site_biodiv$Year)
myData <- left_join(meta[,c("Site_ID", "Protection", "Depth_m", "SST", "DHW", "dist_to_coast")], Site_biodiv)
myData <- myData %>%
filter(!is.na(Site))
myData <- myData %>%
mutate(cyclone = case_when(
Year%in%c("2016", "2017_pre") ~ "Pre-cyclone",
Year%in%c("2017_post", "2018","2019","2020","2021","2022","2023")  ~ "Post-cyclone"))
load("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Benthic_cover_site_all.rdata")
bleach_disease <- read.csv("c://Users/mathonlocal/Desktop/CORENA Project/Reef_Monitoring/Data/3 - Clean_data/Bleaching_Disease.csv", sep = ";", na.strings = "")
myData <- left_join(myData, bleach_disease)
myData <- left_join(myData, Benthic_cover_site_all[,c(1,3,4,5,7,9)])
myData$Site <- as.factor(myData$Site)
myData$Protection <- as.factor(myData$Protection)
myData$cyclone <- as.factor(myData$cyclone)
# Define response variable and predictors
myResponse=c("Fish_richness")
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
myPredictorNumeric=c("SST", "DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
# verifier les correlations entre predicteurs numeriques
cort = cor(na.omit(myData[,myPredictorNumeric]))
cort
cores = detectCores()
cores    # ma machine a 8 coeurs
# Setting the different parameters to combine
tree.complexity = c(1:5)
learning.rate = c(0.01, 0.005, 0.001)
bag.fraction = c(0.5,0.75)
#Make cluster for parallel processing
cores = detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
responseName=myResponse # in case there is only one response variable
print(paste("----------------------", responseName))
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictorNumeric)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "poisson")
best_parameters
View(par_output)
View(myData)
# Define response variable and predictors
myResponse=c("Fish_abundance")
myPredictor=c("Year","Site", "Protection","cyclone", "SST",
"DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
myPredictorNumeric=c("SST", "DHW", "dist_to_coast", "CORAL", "GORGONIANS", "SPONGES", "MACROALGAE",
"DEAD CORAL WITH ALGAE", "Number_frames_bleaching", "Number_frames_disease", "Recruits_density")
cores = detectCores()
cores    # ma machine a 8 coeurs
# Setting the different parameters to combine
tree.complexity = c(1:5)
learning.rate = c(0.01, 0.005, 0.001)
bag.fraction = c(0.5,0.75)
#Make cluster for parallel processing
cores = detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
responseName=myResponse # in case there is only one response variable
print(paste("----------------------", responseName))
# define empty output matrix
output <- matrix(ncol=9)
par_output =  foreach(i = tree.complexity, .packages=c("foreach")) %dopar% {
foreach(j = learning.rate, .packages=c("foreach")) %dopar% {
foreach(k = bag.fraction, .packages=c("foreach")) %dopar% {
#need to load package within foreach loop
source("BRT_Functions.R")
# model name
nam = paste0("Model_",responseName,"_tc_", i, "_lr_", j, "_bf_", k)
# model optimization
t = optimize_gaussian_brts(tree.com = i,learn = j, bag.f = k, myData, responseName, myPredictor)
# assign results to output matrix
if(!is.null(t$interaction.depth)){ output = rbind(output, c(nam, unlist(t))) }
output
}
}
}
# extract best brts parameters
best_parameters = extract_best_parameters_par(par_output, responseName, "poisson")
best_parameters
